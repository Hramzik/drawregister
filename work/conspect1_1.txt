

коды скан-кодов клавиатуры: esc, 1, 2, ... (f1, f2 не было)

programmable peripheral interface - туда в регистр передается скан-код нажатой клавишы (байт) (старший бит - нажата/отжата)
занимается не только клавой

polling/опрос:
    как можно чаще обращаемся к ppi за данными

    порт - регистр микросхемы, подключенной к ЦП. read-write
    in  al, 60h
    out ...

    процессор должен быть всегда сфокусирован на просмотре команд, ему нельзя отвлекаться, иначе пропустит нажатие
    не может войти в энергосбережение

ради этого сделан механизм прерываний:
    interrupt controller
    interrupt request (irq) - у всех свои приоритеты
    самый высокий у системных часов (irq0, раз в 55мс)
    при одном ядре на нем основано переключение задач
    (сейчас 20мс)

    в системных часах:
    первый канал таймера:
    контролер памяти раз в интервал производит считывание со всех оперативки, чтобы восстановить напряжение на конденсаторе
    за счет этого можно разогнать комп
    последний канал таймера:
    бипер (таймер подключен к кварцевомы резонатору (генератору), выдающему постоянную частоту)
    каждый раз при получении сигнала число в регистре уменьшается на 1

    если записать FFFF, то за 55мс досчитается (1.19 мгц)

    у контроллера клавиатуры irq lvl = 1
    внутри - очередь, может переполниться и данные потеряются

    в проце есть interrupt flag - если выставлен, то проц реагирует на флаги
    cli -  clear interrupt flag

    irq1 - 09 прерывание
    связь жестко задана

    00-0A прерывания привязаны к аппаратуре
    00-07 внутренние состояние процессора (деление на ноль, большой числ маленький знамен - прерывание 0 (завершает текущий процесс) (можно повесить на него себя - перехватить))

    08 - irq0
    09 - irq1
    ...
    irq+8 - irq

    для запоминания адреса возврата используется стэк текущей программы
    (3 слова) - флаги процессора (так как прерывание их попортит)
    и еще       дальний адрес возврата (cs:ip)
    регистры сохраняются обработчиком прерывания

    иногда обработчик использует свой стэк, запоминая адрес вашего

    одно прерывание может прервать другое, с более низким приоритетом

    rom bios:
        in al, 60h
        ...
        перевод в ascii в зависимости от нажатых ранее shift, ...

    сейчас буфер больше, чем на 15 нажатий, находится не в биосе, а в драйвере...

    после записи в буфер, надло мигнуть старшим битом в 61 порту (0->1->0)
    еще надо посигналлить INTC (в порт 20 щаписать 20h)

    iret - возврат из прерывания

    таблица перевода в ascii лежит в биосе, русская - в драйвере

    
